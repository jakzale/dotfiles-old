"Setting up the guifont

if has('gui_running')
    set guifont=Menlo\ Regular:h11
endif


augroup my_ruby
    autocmd!
    " Setting width of tabs for ruby at 2 spaces
    autocmd FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
    " Same for coffescript
    autocmd FileType coffee setlocal shiftwidth=2 tabstop=2 softtabstop=2
    " and haml and eruby
    autocmd FileType haml setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType eruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
augroup END

" Simple mapping for faster leaving of insert mode
"inoremap <esc> <nop>
inoremap jk <esc>

" Shortcuts for switching background
nnoremap <Leader>bl :set background=light<CR>
nnoremap <Leader>bd :set background=dark<CR>



augroup my_markdown
    autocmd!
    " Adding support for Marked.app
    autocmd FileType markdown :nnoremap <Leader>m :silent !open -a Marked.app '%:p'<CR>:redraw!<CR>
    autocmd FileType markdown set wrap linebreak nolist
    "autocmd FileType markdown :set wm=2

    " Add additional row below the row -- still not shure how to solve this
    " one
    autocmd FileType markdown :nnoremap <Leader>h yypVr-<CR>
    autocmd FileType markdown :nnoremap <Leader>H yypVr=<CR>

    " Adding shortcuts for underlying
    if has("gui_running")
        autocmd FileType markdown let &showbreak='↳'
    else
        autocmd FileType markdown let &showbreak='↳ '
    endif
augroup END

augroup my_autosave
    autocmd!
    " Autosave whenever you loose focus
    autocmd FocusLost * silent! wall
augroup END

let g:LatexBox_viewer = "open"

" Haskell support
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

" Support for latex viewing
augroup my_latex
    autocmd!
    autocmd FileType tex nnoremap <silent> <Leader>ls :silent
            \ !/Applications/Skim.app/Contents/SharedSupport/displayline
            \ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>"
            \ "%:p" <CR>:redraw!<CR>
    autocmd FileType tex set textwidth=79
augroup END

" Mapping <leader k> to start karma
nnoremap <Leader>k :!grunt test-karma<CR>

" Ignore Angularjs proprietary prefixes
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

" Ensuring proper colors for the gui
if has('gui_running')
    let g:js_context_colors = [7, 64, 136, 33, 160, 37, 125]
endif

" Context colouring for javascript
augroup my_javascript
    autocmd!
    autocmd FileType javascript nnoremap <Leader>t :JSContextColorToggle<CR>
augroup END

" Disable context colouring globally -- too slow
let g:js_context_colors_enabled = 0

" Disable TypeScript checkers for now
let g:syntastic_typescript_checkers = ['']
